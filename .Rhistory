# selecionado (por isso aqui ele recebe 1) quando input$arquivoescolhido é nulo.
aux <- 1
}else{
aux <- 0
inFile <- input$arquivoescolhido
dados <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, dec = input$dec)
}
}
return(list(aux = aux, dados = dados))
}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# aqui pegamos os nomes da coluna e colocamos no UI, obs: estudar renderUI
output$nomes_das_colunas <- renderUI({
dados <- dados(input)
if(dados$aux == 1)  nomes <- as.matrix("Escolha o arquivo com o banco de dados")
else nomes <- as.matrix(colnames(dados$dados))
selectizeInput(inputId = "SelecionarQualitativa", "Selecione as variáveis qualitativas!",
choices = nomes , multiple = TRUE)
})
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# plot dos dados
output$Dados <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else head(dados$dados, n = input$obs)
})
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# essa função vai retornar as variáveis que são númericas
# e também o banco de dados transformado em factor as colunas com o nome
# que a pessoa marcou em input.SelecionarQualitativa
Verificar_Variaveis <- function(){
aux <- dados(input)$aux
dados <- dados(input)$dados
Verificar_numeric0000 <- sapply(dados, is.numeric)
Colunas_numeric0000 <- which( Verificar_numeric0000 == TRUE)
if(!is.null(input$SelecionarQualitativa)){
for(i in input$SelecionarQualitativa){
coluna <- which(colnames(dados) == i)
dados[,coluna] <- as.factor(dados[,coluna])
}
}
if( aux == 1 ) as.matrix("Escolha o arquivo com o banco de dados")
else{
if(length(input$SelecionarQualitativa) >= length(Colunas_numeric0000)) Colunas_numeric <- 0
else{
Verificar_numeric <- sapply(dados, is.numeric)
Colunas_numeric <- which( Verificar_numeric == TRUE)
}
}
return(list(Colunas_numericas = Colunas_numeric, Dados = dados))
}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# table da tabela com as variáveis quantitativas ( númericas )
output$TabelaDescritiva_quantitativa <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else{
Colunas_numeric <- Verificar_Variaveis()$Colunas_numericas
dados <- Verificar_Variaveis()$Dados
if(length(Colunas_numeric) == 1){
if(Colunas_numeric == 0) as.matrix("") else
summary(dados[Colunas_numeric])
}else
summary(dados[Colunas_numeric])
}
)}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# table da tabela com as variáveis qualitativas ( fatores )
output$TabelaDescritiva_qualitativa <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else{
Colunas_numeric <- Verificar_Variaveis()$Colunas_numericas
dados <- Verificar_Variaveis()$Dados
if(length(Colunas_numeric) == ncol(dados) ) as.matrix("") else{
if(length(Colunas_numeric) == 1){
if(Colunas_numeric == 0) summary(dados)else
summary(dados[-Colunas_numeric])
}else
summary(dados[-Colunas_numeric])
}
}
})
#------------------------------------------------------------------------------#
}     ######################################### Final do server
# Executa o aplicativo criado
shinyApp(ui = ui, server = server)
# M?dia, mediana, moda, DP, Var, 1 quartil, 3 quartil, min, max, assimetria e curtose.
#Verificando a mudançahyper(3,8,4,4)
dhyper(4,8,4,4)
#----------------------------- Atividade Final -------------------------------#
#------------------------ Estatística computacional --------------------------#
#--------------------------- Lissandra e Gabriel -----------------------------#
require(shiny)
require(markdown)
require(datasets)
ui <-
navbarPage("Navegação",
tabPanel("Tutorial",
titlePanel("Tutorial para abrir o banco de dados"),
paste("  Esse é o Tutorial para abrir o banco de dados")
),
tabPanel("Dados",
sidebarLayout(
sidebarPanel(
radioButtons("Escolha", "Qual banco de dados quer usar?",
c("Exemplo", "Seu própio banco de dados")), hr(),
conditionalPanel( condition = "input.Escolha == 'Exemplo'",
selectInput("ExemplodeDados", label = "Exemplos de bancos de dados",
choices = list("faithful" = "faithful", "cars" = "cars" ,
"iris" = "iris", "WorldPhones" = "WorldPhones"),
selected = "cars")
), hr(),
conditionalPanel( condition = "input.Escolha == 'Seu própio banco de dados'",
fileInput("arquivoescolhido", label = "Escolha o seu arquivo .csv",
accept = c(
"text/csv",
"text/comma-separated-values",
"text/tab-separated-values",
"text/plain",
".csv"
)),
checkboxInput("header", "Header", TRUE),
radioButtons("sep", "Separador",
c( Virgula = ",", Ponto_e_Virgula = ";", Tab = "\t"),
";"),
radioButtons("dec", "Decimal",
c( Virgula = ",", ponto = "."),
".")
),
numericInput("obs", "Numero de observações que deseja ver:", 10)
),
mainPanel(tableOutput("Dados"))
)
),
tabPanel("Descritiva",
sidebarLayout(
sidebarPanel(
uiOutput("nomes_das_colunas")
),
mainPanel(tableOutput("TabelaDescritiva_quantitativa"),
tableOutput("TabelaDescritiva_qualitativa"))
)
)
)
server <- function(input, output, session)
{     ######################################### Inicio do server
#------------------------------------------------------------------------------#
# essa função é usada para os exemplos
datasetInput <- reactive({
switch(input$ExemplodeDados,
"cars" = cars,
"faithful" = faithful,
"WorldPhones" = as.data.frame(WorldPhones),
"iris" = iris)
})
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# função que retorna os dados e um auxiliar falado mais abaixo
dados <- function(input){
if(input$Escolha == "Exemplo"){
dados <- datasetInput()
aux <- 0
}
if(input$Escolha == "Seu própio banco de dados"){
if (is.null(input$arquivoescolhido)){
# obs: esse objeto aux é só para aparecer uma mensagem quando não tiver nenhum arquivo
# selecionado (por isso aqui ele recebe 1) quando input$arquivoescolhido é nulo.
aux <- 1
}else{
aux <- 0
inFile <- input$arquivoescolhido
dados <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, dec = input$dec)
}
}
return(list(aux = aux, dados = dados))
}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# aqui pegamos os nomes da coluna e colocamos no UI, obs: estudar renderUI
output$nomes_das_colunas <- renderUI({
dados <- dados(input)
if(dados$aux == 1)  nomes <- as.matrix("Escolha o arquivo com o banco de dados")
else nomes <- as.matrix(colnames(dados$dados))
selectizeInput(inputId = "SelecionarQualitativa", "Selecione as variáveis qualitativas!",
choices = nomes , multiple = TRUE)
})
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# plot dos dados
output$Dados <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else head(dados$dados, n = input$obs)
})
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# essa função vai retornar as variáveis que são númericas
# e também o banco de dados transformado em factor as colunas com o nome
# que a pessoa marcou em input.SelecionarQualitativa
Verificar_Variaveis <- function(){
aux <- dados(input)$aux
dados <- dados(input)$dados
Verificar_numeric0000 <- sapply(dados, is.numeric)
Colunas_numeric0000 <- which( Verificar_numeric0000 == TRUE)
if(!is.null(input$SelecionarQualitativa)){
for(i in input$SelecionarQualitativa){
coluna <- which(colnames(dados) == i)
dados[,coluna] <- as.factor(dados[,coluna])
}
}
if( aux == 1 ) as.matrix("Escolha o arquivo com o banco de dados")
else{
if(length(input$SelecionarQualitativa) >= length(Colunas_numeric0000)) Colunas_numeric <- 0
else{
Verificar_numeric <- sapply(dados, is.numeric)
Colunas_numeric <- which( Verificar_numeric == TRUE)
}
}
return(list(Colunas_numericas = Colunas_numeric, Dados = dados))
}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# table da tabela com as variáveis quantitativas ( númericas )
output$TabelaDescritiva_quantitativa <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else{
Colunas_numeric <- Verificar_Variaveis()$Colunas_numericas
dados <- Verificar_Variaveis()$Dados
if(length(Colunas_numeric) == 1){
if(Colunas_numeric == 0) as.matrix("") else
summary(dados[Colunas_numeric])
}else
summary(dados[Colunas_numeric])
}
)}
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# table da tabela com as variáveis qualitativas ( fatores )
output$TabelaDescritiva_qualitativa <- renderTable({
dados <- dados(input)
if(dados$aux == 1) as.matrix("Escolha o arquivo com o banco de dados")
else{
Colunas_numeric <- Verificar_Variaveis()$Colunas_numericas
dados <- Verificar_Variaveis()$Dados
if(length(Colunas_numeric) == ncol(dados) ) as.matrix("") else{
if(length(Colunas_numeric) == 1){
if(Colunas_numeric == 0) summary(dados)else
summary(dados[-Colunas_numeric])
}else
summary(dados[-Colunas_numeric])
}
}
})
#------------------------------------------------------------------------------#
}     ######################################### Final do server
# Executa o aplicativo criado
shinyApp(ui = ui, server = server)
# M?dia, mediana, moda, DP, Var, 1 quartil, 3 quartil, min, max, assimetria e curtose.
#Verificando a mudançahyper(3,8,4,4)
dhyper(4,8,4,4)
library("MASS", lib.loc="C:/Program Files/R/R-3.3.0/library")
?painters
library("plotly", lib.loc="~/R/win-library/3.3")
shiny::runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp()
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
install.packages("shinythemes")
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
library("shinythemes", lib.loc="~/R/win-library/3.3")
runApp('F:/Técnicas computacionais')
runApp('F:/Técnicas computacionais')
runApp()
runApp('F:/Técnicas computacionais')
runApp()
runApp('F:/Técnicas computacionais')
dados <- read.table("Dados", header = T, dec = ",")
dados <- read.table(choose.files(), header = T, dec = ",")
dados <- read.table(choose.files(), header = T, dec = ",") ; dados
head(Dados)
Dados <- dados( , c(2,3,6,7,8))
dados <- read.table(choose.files(), header = T, dec = ",") ; dados
Dados <- dados( , c(2,3,6,7,8))
Dados <- dados[ , c(2,3,6,7,8)]
head(Dados)
Dados <- dados[ , c(2,3,7,8)]
head(Dados)
Dados <- attach(dados[ , c(2,3,7,8)])
head(Dados)
head(Dados)
tab.1 <- table(Dados$Civil, Dados$Instrucao)
tab.1 <- table(Dados$Civil, Dados$Instrucao) ; tab.1
as.factor(Dados$Civil)
is.factor(Dados$Civil)
is.factor(Dados$Instrucao)
as.factor(Dados$Instrucao)
is.factor(Dados$Instrucao)
apply(Dados, 2, as.factor)
?names
names
tab.civil <- table(Dados$Civil)
tab.civil <- table(Dados$Civil)
tab.civil <- table(Dados$Civil) ; tab.civil
colnames(tab.civil) <- c("Solteiro", "Casado")
tab.civil
?colnames
colnames(tab.civil, do.NULL = F)
colnames(tab.civil) <- c("Solteiro", "Casado")
set.civil <- pie(tab.civil, col = c("red", "blue"))
set.civil <- pie(tab.civil, col = c("red", "blue"), labels = c("Solteiro", "Casado"))
?pie
tab.1 <- table(Dados$Civil, Dados$Instrucao) ; tab.1
tab.civil <- table(Dados$Civil) ; tab.civil
head(Dados)
Dados <- dados[ , c(2,3,7,8)]
head(Dados)
set.civil <- pie(tab.civil, col = c("red", "blue"), labels = c("Solteiro", "Casado"))
tab.instrucao <- table(Dados$Instrucao)
plot(tab.instrucao)
barplot(tab.instrucao)
barplot(tab.instrucao, col = "darkgreen")
barplot(tab.instrucao, col = "darkgray")
barplot(tab.instrucao, col = "black")
barplot(tab.instrucao, col = "black", xlab = "Grau de instrução")
tab.1 <- table(Dados$Civil, Dados$Instrucao) ; tab.1
margin.table(tab.1, margin = 1)
plot(tab.1)
barplot(tab.1)
plot(tab.1)
plot(tab.1, main = "", xlab = "Estado Civil", ylab = "Grau de instrução")
plot(tab.1, main = "", xlab = "Estado Civil", ylab = "Grau de instrução", col = "darkgray")
plot(tab.1, main = "", xlab = "Estado Civil", ylab = "Grau de Instrução", col = "darkgray")
barplot(tab.1, legend = T)
barplot(tab.1, legend = T, xlab = "Grau de Instrução")
plot(tab.1, main = "", xlab = "Estado Civil", ylab = "Grau de Instrução", col = "darkgray")
barplot(tab.1, legend = T, xlab = "Grau de Instrução")
shiny::runApp('F:/Técnicas computacionais/raschunho')
library("shiny", lib.loc="~/R/win-library/3.3")
library("shinythemes", lib.loc="~/R/win-library/3.3")
library("plotly", lib.loc="~/R/win-library/3.3")
runApp('F:/Técnicas computacionais/raschunho')
runApp('F:/Técnicas computacionais/raschunho')
runApp('F:/Técnicas computacionais/raschunho')
runApp('F:/Técnicas computacionais/raschunho')
setwd("F:/Técnicas computacionais/raschunho")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
